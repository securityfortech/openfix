
import React from "react";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { Database } from "@/integrations/supabase/types";
import { SeverityBadge } from "./SeverityBadge";
import { StatusBadge } from "./StatusBadge";

type Vulnerability = Database['public']['Tables']['vulnerabilities']['Row'];

interface VulnerabilityTableProps {
  vulnerabilities: Vulnerability[];
  loading: boolean;
  formatTimeAgo: (dateString: string | null) => string;
  customColumns?: {
    nameHeader?: string;
  };
}

export const VulnerabilityTable = ({ 
  vulnerabilities, 
  loading, 
  formatTimeAgo,
  customColumns
}: VulnerabilityTableProps) => {
  if (loading) {
    return <div className="py-8 text-center text-muted-foreground">Loading vulnerabilities...</div>;
  }

  if (vulnerabilities.length === 0) {
    return (
      <div className="py-8 text-center text-muted-foreground">
        No vulnerabilities found in this category.
      </div>
    );
  }

  return (
    <Table>
      <TableHeader>
        <TableRow>
          <TableHead>{customColumns?.nameHeader || "Vulnerability"}</TableHead>
          <TableHead>Location</TableHead>
          <TableHead>Severity</TableHead>
          <TableHead>Status</TableHead>
          <TableHead>Detected</TableHead>
          <TableHead className="text-right">Actions</TableHead>
        </TableRow>
      </TableHeader>
      <TableBody>
        {vulnerabilities.map((vuln) => (
          <TableRow key={vuln.id}>
            <TableCell className="font-medium">
              <div className="flex items-center gap-2">
                <StatusBadge status={vuln.status} />
                <span>{vuln.name}</span>
              </div>
            </TableCell>
            <TableCell className="max-w-[200px] truncate">{vuln.location}</TableCell>
            <TableCell><SeverityBadge severity={vuln.severity} /></TableCell>
            <TableCell>
              {vuln.status === "fixed" ? (
                <span className="inline-flex items-center gap-1 text-green-600">
                  <span>Fixed</span>
                </span>
              ) : (
                <span className="inline-flex items-center gap-1 text-amber-600">
                  <span>Open</span>
                </span>
              )}
            </TableCell>
            <TableCell>
              {formatTimeAgo(vuln.detected)}
            </TableCell>
            <TableCell className="text-right">
              <div className="flex items-center justify-end gap-2">
                {vuln.status === "fixed" ? (
                  <Button variant="outline" size="sm">View Details</Button>
                ) : (
                  <>
                    <Button variant="outline" size="sm">Ignore</Button>
                    <Button size="sm">Fix Issue</Button>
                  </>
                )}
              </div>
            </TableCell>
          </TableRow>
        ))}
      </TableBody>
    </Table>
  );
};
