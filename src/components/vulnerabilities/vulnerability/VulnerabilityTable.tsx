
import React from "react";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { Database } from "@/integrations/supabase/types";
import { SeverityBadge } from "@/components/dashboard/vulnerability/SeverityBadge";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { ExternalLink, Shield, ShieldAlert, ShieldCheck } from "lucide-react";
import { cn } from "@/lib/utils";

type Vulnerability = Database['public']['Tables']['vulnerabilities']['Row'] & {
  team_members?: {
    name: string;
    avatar_url: string | null;
  } | null;
};

interface VulnerabilityTableProps {
  vulnerabilities: Vulnerability[];
  loading: boolean;
  formatTimeAgo: (dateString: string | null) => string;
  customColumns?: {
    nameHeader?: string;
  };
}

export const VulnerabilityTable = ({ 
  vulnerabilities, 
  loading, 
  formatTimeAgo,
  customColumns
}: VulnerabilityTableProps) => {
  if (loading) {
    return (
      <div className="flex justify-center items-center py-12">
        <div className="animate-pulse space-y-4">
          <div className="h-4 bg-muted rounded w-48"></div>
          <div className="h-4 bg-muted rounded w-64"></div>
        </div>
      </div>
    );
  }

  if (vulnerabilities.length === 0) {
    return (
      <div className="py-12 text-center">
        <div className="inline-flex items-center justify-center w-14 h-14 rounded-full bg-muted mb-4">
          <Shield className="h-6 w-6 text-muted-foreground" />
        </div>
        <h3 className="text-lg font-medium mb-2">No vulnerabilities found</h3>
        <p className="text-muted-foreground max-w-sm mx-auto text-sm">
          No vulnerabilities found in this category.
        </p>
      </div>
    );
  }

  return (
    <div className="rounded-md overflow-hidden">
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead className="font-medium">{customColumns?.nameHeader || "Vulnerability"}</TableHead>
            <TableHead className="font-medium">Severity</TableHead>
            <TableHead className="font-medium">Status</TableHead>
            <TableHead className="font-medium">Assigned To</TableHead>
            <TableHead className="font-medium">Detected</TableHead>
            <TableHead className="text-right font-medium">Actions</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {vulnerabilities.map((vuln) => (
            <TableRow key={vuln.id} className="hover:bg-muted/10 transition-colors">
              <TableCell className="font-medium">
                <div className="flex items-center gap-2">
                  {vuln.status === 'fixed' ? 
                    <ShieldCheck className="h-4 w-4 text-green-600" /> : 
                    <ShieldAlert className="h-4 w-4 text-amber-500" />}
                  <span className="truncate max-w-[180px]">{vuln.name}</span>
                </div>
              </TableCell>
              <TableCell><SeverityBadge severity={vuln.severity} /></TableCell>
              <TableCell>
                <span className={cn(
                  "inline-flex items-center px-2 py-1 rounded-full text-xs font-medium",
                  vuln.status === "fixed" 
                    ? "bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400"
                    : "bg-amber-100 text-amber-800 dark:bg-amber-900/30 dark:text-amber-400"
                )}>
                  {vuln.status === "fixed" ? "Fixed" : "Open"}
                </span>
              </TableCell>
              <TableCell>
                {vuln.team_members ? (
                  <div className="flex items-center gap-2">
                    <Avatar className="h-6 w-6">
                      {vuln.team_members.avatar_url && (
                        <AvatarImage src={vuln.team_members.avatar_url} alt={vuln.team_members.name} />
                      )}
                      <AvatarFallback>
                        {vuln.team_members.name.substring(0, 2).toUpperCase()}
                      </AvatarFallback>
                    </Avatar>
                    <span className="text-sm">{vuln.team_members.name}</span>
                  </div>
                ) : (
                  <span className="text-muted-foreground text-sm">Unassigned</span>
                )}
              </TableCell>
              <TableCell>
                <span className="text-muted-foreground text-sm">{formatTimeAgo(vuln.detected)}</span>
              </TableCell>
              <TableCell className="text-right">
                <div className="flex items-center justify-end gap-2">
                  {vuln.status === "fixed" ? (
                    <Button variant="outline" size="sm" className="h-7 text-xs">View Details</Button>
                  ) : (
                    <>
                      <Button variant="outline" size="sm" className="h-7 text-xs">Ignore</Button>
                      <Button size="sm" className="h-7 text-xs">Fix Issue</Button>
                    </>
                  )}
                </div>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </div>
  );
};
