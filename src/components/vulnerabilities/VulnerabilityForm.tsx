
import React, { useEffect, useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { supabase } from "@/integrations/supabase/client";
import { useAuth } from "@/contexts/AuthContext";
import { toast } from "@/hooks/use-toast";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Asset } from "@/types/asset";

// Define the form schema with validation
const formSchema = z.object({
  name: z.string().min(3, { message: "Name must be at least 3 characters" }),
  location: z.string().min(3, { message: "Location must be at least 3 characters" }),
  description: z.string().optional(),
  severity: z.enum(["critical", "medium", "low"]),
  asset_id: z.string().optional(),
});

type VulnerabilityFormValues = z.infer<typeof formSchema>;

interface VulnerabilityFormProps {
  onSuccess?: () => void;
}

const VulnerabilityForm: React.FC<VulnerabilityFormProps> = ({ onSuccess }) => {
  const { user } = useAuth();
  const [isSubmitting, setIsSubmitting] = React.useState(false);
  const [assets, setAssets] = useState<Asset[]>([]);
  const [isLoadingAssets, setIsLoadingAssets] = useState(true);

  // Fetch assets for the dropdown
  useEffect(() => {
    const fetchAssets = async () => {
      try {
        setIsLoadingAssets(true);
        const { data, error } = await supabase
          .from('assets')
          .select('*');
        
        if (error) {
          throw error;
        }
        
        setAssets(data || []);
      } catch (error) {
        console.error('Error fetching assets:', error);
        toast({
          title: "Error loading assets",
          description: "Failed to load assets for selection",
          variant: "destructive",
        });
      } finally {
        setIsLoadingAssets(false);
      }
    };

    fetchAssets();
  }, []);

  const form = useForm<VulnerabilityFormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: "",
      location: "",
      description: "",
      severity: "medium",
      asset_id: undefined,
    },
  });

  const onSubmit = async (data: VulnerabilityFormValues) => {
    if (!user) {
      toast({
        title: "Authentication required",
        description: "You must be logged in to create vulnerabilities",
        variant: "destructive",
      });
      return;
    }

    setIsSubmitting(true);

    try {
      const { data: newVulnerability, error } = await supabase
        .from('vulnerabilities')
        .insert({
          name: data.name,
          location: data.location,
          description: data.description || null,
          severity: data.severity,
          user_id: user.id,
          asset_id: data.asset_id || null,
        })
        .select();

      if (error) {
        throw error;
      }

      toast({
        title: "Vulnerability created",
        description: "The vulnerability has been successfully recorded",
      });

      form.reset();
      
      if (onSuccess) {
        onSuccess();
      }
    } catch (error: any) {
      console.error("Error creating vulnerability:", error);
      toast({
        title: "Failed to create vulnerability",
        description: error.message || "An unknown error occurred",
        variant: "destructive",
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>Vulnerability Details</CardTitle>
      </CardHeader>
      <CardContent>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
            <FormField
              control={form.control}
              name="name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Vulnerability Name</FormLabel>
                  <FormControl>
                    <Input placeholder="SQL Injection Vulnerability" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="location"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Location</FormLabel>
                  <FormControl>
                    <Input placeholder="api/users endpoint" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="asset_id"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Related Asset</FormLabel>
                  <Select
                    onValueChange={field.onChange}
                    value={field.value}
                  >
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Select an asset (optional)" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      <SelectItem value="">None</SelectItem>
                      {isLoadingAssets ? (
                        <SelectItem value="" disabled>Loading assets...</SelectItem>
                      ) : (
                        assets.map((asset) => (
                          <SelectItem key={asset.id} value={asset.id}>
                            {asset.name} ({asset.type})
                          </SelectItem>
                        ))
                      )}
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="description"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Description</FormLabel>
                  <FormControl>
                    <Textarea
                      placeholder="Describe the vulnerability in detail"
                      className="min-h-[120px]"
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="severity"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Severity Level</FormLabel>
                  <Select
                    onValueChange={field.onChange}
                    defaultValue={field.value}
                  >
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Select severity level" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      <SelectItem value="critical">Critical</SelectItem>
                      <SelectItem value="medium">Medium</SelectItem>
                      <SelectItem value="low">Low</SelectItem>
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />

            <div className="flex justify-end gap-2">
              <Button type="button" variant="outline" onClick={() => form.reset()}>
                Reset
              </Button>
              <Button type="submit" disabled={isSubmitting}>
                {isSubmitting ? "Submitting..." : "Create Vulnerability"}
              </Button>
            </div>
          </form>
        </Form>
      </CardContent>
    </Card>
  );
};

export default VulnerabilityForm;
