
import React from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { supabase } from "@/integrations/supabase/client";
import { useAuth } from "@/contexts/AuthContext";
import { toast } from "@/hooks/use-toast";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Form } from "@/components/ui/form";
import { useVulnerabilityForm } from "@/hooks/useVulnerabilityForm";
import { 
  VulnerabilityFormFields, 
  formSchema, 
  VulnerabilityFormValues 
} from "./VulnerabilityFormFields";
import VulnerabilityFormActions from "./VulnerabilityFormActions";

interface VulnerabilityFormProps {
  onSuccess?: () => void;
}

const VulnerabilityForm: React.FC<VulnerabilityFormProps> = ({ onSuccess }) => {
  const { user } = useAuth();
  const [isSubmitting, setIsSubmitting] = React.useState(false);
  const { assets, isLoadingAssets, teamMembers, isLoadingTeamMembers } = useVulnerabilityForm();

  const form = useForm<VulnerabilityFormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: "",
      description: "",
      severity: "medium", // Default to medium
      asset_id: "none",
      assignee_id: "none",
    },
  });

  const onSubmit = async (data: VulnerabilityFormValues) => {
    if (!user) {
      toast({
        title: "Authentication required",
        description: "You must be logged in to create vulnerabilities",
        variant: "destructive",
      });
      return;
    }

    setIsSubmitting(true);

    try {
      // Console log the form data for debugging
      console.log("Submitting vulnerability with data:", data);
      
      const { data: newVulnerability, error } = await supabase
        .from('vulnerabilities')
        .insert({
          name: data.name,
          description: data.description || null,
          severity: data.severity,
          user_id: user.id,
          asset_id: data.asset_id === "none" ? null : data.asset_id,
          assignee_id: data.assignee_id === "none" ? null : data.assignee_id,
          location: "" // Add an empty location since it's required in the database
        })
        .select();

      if (error) {
        console.error("Supabase error:", error);
        throw error;
      }

      toast({
        title: "Vulnerability created",
        description: "The vulnerability has been successfully recorded",
      });

      form.reset();
      
      if (onSuccess) {
        onSuccess();
      }
    } catch (error: any) {
      console.error("Error creating vulnerability:", error);
      toast({
        title: "Failed to create vulnerability",
        description: error.message || "An unknown error occurred",
        variant: "destructive",
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>Vulnerability Details</CardTitle>
      </CardHeader>
      <CardContent>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
            <VulnerabilityFormFields 
              form={form} 
              assets={assets} 
              isLoadingAssets={isLoadingAssets} 
              teamMembers={teamMembers}
              isLoadingTeamMembers={isLoadingTeamMembers}
            />
            <VulnerabilityFormActions 
              form={form} 
              isSubmitting={isSubmitting} 
            />
          </form>
        </Form>
      </CardContent>
    </Card>
  );
};

export default VulnerabilityForm;
