
import React, { useMemo } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { 
  BarChart, 
  Bar, 
  XAxis, 
  YAxis, 
  CartesianGrid, 
  Tooltip, 
  ResponsiveContainer,
  Legend
} from "recharts";
import { Database } from "@/integrations/supabase/types";
import { ChartContainer, ChartTooltip, ChartTooltipContent } from "@/components/ui/chart";

type Vulnerability = Database['public']['Tables']['vulnerabilities']['Row'];

interface VulnerabilityChartProps {
  vulnerabilities: Vulnerability[];
}

export const VulnerabilityChart = ({ vulnerabilities }: VulnerabilityChartProps) => {
  const chartData = useMemo(() => {
    const severityCounts = {
      critical: 0,
      high: 0,
      medium: 0,
      low: 0
    };
    
    const statusCounts = {
      open: 0,
      fixed: 0,
      inProgress: 0,
      ignored: 0
    };
    
    vulnerabilities.forEach(vuln => {
      // Count by severity
      if (severityCounts.hasOwnProperty(vuln.severity.toLowerCase())) {
        severityCounts[vuln.severity.toLowerCase() as keyof typeof severityCounts]++;
      }
      
      // Count by status
      if (statusCounts.hasOwnProperty(vuln.status.toLowerCase())) {
        statusCounts[vuln.status.toLowerCase() as keyof typeof statusCounts]++;
      }
    });
    
    // Prepare chart data arrays
    const severityData = [
      { name: 'Critical', value: severityCounts.critical, fill: '#ef4444' },
      { name: 'High', value: severityCounts.high, fill: '#f97316' },
      { name: 'Medium', value: severityCounts.medium, fill: '#eab308' },
      { name: 'Low', value: severityCounts.low, fill: '#22c55e' }
    ];
    
    const statusData = [
      { name: 'Open', value: statusCounts.open, fill: '#f97316' },
      { name: 'In Progress', value: statusCounts.inProgress, fill: '#3b82f6' },
      { name: 'Fixed', value: statusCounts.fixed, fill: '#22c55e' },
      { name: 'Ignored', value: statusCounts.ignored, fill: '#6b7280' }
    ];
    
    return {
      byDate: vulnerabilities.map(vuln => ({
        name: new Date(vuln.detected).toLocaleDateString(),
        severity: vuln.severity,
        status: vuln.status
      })),
      bySeverity: severityData,
      byStatus: statusData
    };
  }, [vulnerabilities]);

  if (vulnerabilities.length === 0) {
    return (
      <Card className="p-6 text-center">
        <p className="text-muted-foreground">No vulnerability data to display</p>
      </Card>
    );
  }

  const chartConfig = {
    critical: { color: '#ef4444', label: 'Critical' },
    high: { color: '#f97316', label: 'High' },
    medium: { color: '#eab308', label: 'Medium' },
    low: { color: '#22c55e', label: 'Low' },
    open: { color: '#f97316', label: 'Open' },
    fixed: { color: '#22c55e', label: 'Fixed' },
  };

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardContent className="pt-6">
            <h3 className="font-medium mb-4">Vulnerabilities by Severity</h3>
            <div className="h-64">
              <ChartContainer config={chartConfig}>
                <ResponsiveContainer width="100%" height="100%">
                  <BarChart data={chartData.bySeverity} margin={{ top: 10, right: 30, left: 0, bottom: 5 }}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="name" />
                    <YAxis />
                    <ChartTooltip content={<ChartTooltipContent />} />
                    <Bar dataKey="value" name="Count" />
                  </BarChart>
                </ResponsiveContainer>
              </ChartContainer>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="pt-6">
            <h3 className="font-medium mb-4">Vulnerabilities by Status</h3>
            <div className="h-64">
              <ChartContainer config={chartConfig}>
                <ResponsiveContainer width="100%" height="100%">
                  <BarChart data={chartData.byStatus} margin={{ top: 10, right: 30, left: 0, bottom: 5 }}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="name" />
                    <YAxis />
                    <ChartTooltip content={<ChartTooltipContent />} />
                    <Bar dataKey="value" name="Count" />
                  </BarChart>
                </ResponsiveContainer>
              </ChartContainer>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};
