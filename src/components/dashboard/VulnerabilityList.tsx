
import React, { useEffect, useState } from "react";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { AlertTriangle, CheckCircle, Clock, ShieldAlert, ShieldCheck, Plus } from "lucide-react";
import { supabase } from "@/integrations/supabase/client";
import { toast } from "@/hooks/use-toast";
import { Link } from "react-router-dom";
import { Database } from "@/integrations/supabase/types";

type Vulnerability = Database['public']['Tables']['vulnerabilities']['Row'];

export const VulnerabilityList = () => {
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
  const [loading, setLoading] = useState(true);

  const fetchVulnerabilities = async () => {
    try {
      setLoading(true);
      const { data, error } = await supabase
        .from('vulnerabilities')
        .select('*')
        .order('detected', { ascending: false });

      if (error) {
        throw error;
      }

      setVulnerabilities(data || []);
    } catch (error) {
      console.error("Error fetching vulnerabilities:", error);
      toast({
        title: "Failed to load vulnerabilities",
        description: "There was an error loading the vulnerability data",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    // Initial fetch
    fetchVulnerabilities();

    // Set up real-time subscription
    const channel = supabase
      .channel('public:vulnerabilities')
      .on('postgres_changes', 
        { 
          event: '*', 
          schema: 'public', 
          table: 'vulnerabilities' 
        }, 
        (payload) => {
          console.log('Real-time update received:', payload);
          
          // Handle different change types
          if (payload.eventType === 'INSERT') {
            setVulnerabilities(prev => [payload.new as Vulnerability, ...prev]);
            toast({
              title: "New vulnerability detected",
              description: `${payload.new.name} was just added to the system`,
            });
          } else if (payload.eventType === 'UPDATE') {
            setVulnerabilities(prev => 
              prev.map(item => item.id === payload.new.id ? (payload.new as Vulnerability) : item)
            );
          } else if (payload.eventType === 'DELETE') {
            setVulnerabilities(prev => 
              prev.filter(item => item.id !== payload.old.id)
            );
          }
        }
      )
      .subscribe((status) => {
        console.log('Subscription status:', status);
        if (status === 'SUBSCRIBED') {
          console.log('Successfully subscribed to real-time updates');
        }
      });

    // Clean up subscription on unmount
    return () => {
      supabase.removeChannel(channel);
    };
  }, []);

  const handleScanNow = () => {
    toast({
      title: "Scan Initiated",
      description: "Security scan has been started. Results will appear shortly.",
    });
    // In a real app, you might trigger an actual scan here
    setTimeout(() => {
      fetchVulnerabilities();
    }, 2000);
  };

  const getSeverityBadge = (severity: string) => {
    switch (severity) {
      case "critical":
        return <Badge variant="destructive">Critical</Badge>;
      case "medium":
        return <Badge variant="default" className="bg-amber-500">Medium</Badge>;
      case "low":
        return <Badge variant="default" className="bg-blue-500">Low</Badge>;
      default:
        return null;
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case "open":
        return <ShieldAlert className="h-4 w-4 text-amber-500" />;
      case "fixed":
        return <ShieldCheck className="h-4 w-4 text-green-500" />;
      default:
        return null;
    }
  };

  const formatDate = (dateString: string | null) => {
    if (!dateString) return "";
    
    const date = new Date(dateString);
    const now = new Date();
    const diffMs = now.getTime() - date.getTime();
    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
    
    if (diffDays === 0) {
      return "Today";
    } else if (diffDays === 1) {
      return "Yesterday";
    } else if (diffDays < 7) {
      return `${diffDays} days ago`;
    } else if (diffDays < 30) {
      const weeks = Math.floor(diffDays / 7);
      return `${weeks} ${weeks === 1 ? 'week' : 'weeks'} ago`;
    } else {
      return date.toLocaleDateString();
    }
  };

  return (
    <Card className="shadow-sm">
      <CardHeader className="pb-2">
        <div className="flex justify-between items-center">
          <div>
            <CardTitle className="text-xl font-bold">Security Vulnerabilities</CardTitle>
            <CardDescription>Manage detected security issues</CardDescription>
          </div>
          <div className="flex gap-2">
            <Button variant="outline" size="sm" asChild>
              <Link to="/add-vulnerability">
                <Plus className="h-4 w-4 mr-1" />
                Add New
              </Link>
            </Button>
            <Button size="sm" onClick={handleScanNow}>Scan Now</Button>
          </div>
        </div>
      </CardHeader>
      <CardContent>
        {loading ? (
          <div className="flex justify-center items-center py-8">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
          </div>
        ) : vulnerabilities.length === 0 ? (
          <div className="text-center py-8 text-muted-foreground">
            <p>No vulnerabilities found. Add a new vulnerability or run a scan.</p>
            <Button variant="outline" className="mt-4" asChild>
              <Link to="/add-vulnerability">
                <Plus className="h-4 w-4 mr-1" />
                Add Your First Vulnerability
              </Link>
            </Button>
          </div>
        ) : (
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Vulnerability</TableHead>
                <TableHead>Location</TableHead>
                <TableHead>Severity</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Detected</TableHead>
                <TableHead className="text-right">Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {vulnerabilities.map((vuln) => (
                <TableRow key={vuln.id}>
                  <TableCell className="font-medium">
                    <div className="flex items-center gap-2">
                      {getStatusIcon(vuln.status)}
                      <span>{vuln.name}</span>
                    </div>
                  </TableCell>
                  <TableCell className="max-w-[200px] truncate">{vuln.location}</TableCell>
                  <TableCell>{getSeverityBadge(vuln.severity)}</TableCell>
                  <TableCell>
                    {vuln.status === "fixed" ? (
                      <span className="inline-flex items-center gap-1 text-green-600">
                        <CheckCircle className="h-3.5 w-3.5" />
                        Fixed
                      </span>
                    ) : (
                      <span className="inline-flex items-center gap-1 text-amber-600">
                        <AlertTriangle className="h-3.5 w-3.5" />
                        Open
                      </span>
                    )}
                  </TableCell>
                  <TableCell>
                    <div className="flex items-center gap-1 text-xs text-muted-foreground">
                      <Clock className="h-3 w-3" />
                      <span>{formatDate(vuln.detected)}</span>
                    </div>
                  </TableCell>
                  <TableCell className="text-right">
                    <div className="flex items-center justify-end gap-2">
                      {vuln.status === "fixed" ? (
                        <Button variant="outline" size="sm">View Details</Button>
                      ) : (
                        <>
                          <Button variant="outline" size="sm">Ignore</Button>
                          <Button size="sm">Fix Issue</Button>
                        </>
                      )}
                    </div>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        )}
      </CardContent>
    </Card>
  );
};
