
import React, { useEffect, useState } from "react";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { supabase } from "@/integrations/supabase/client";
import { toast } from "@/hooks/use-toast";
import { Link } from "react-router-dom";
import { Database } from "@/integrations/supabase/types";
import { EmptyState } from "./vulnerability/EmptyState";
import { Plus } from "lucide-react";
import { VulnerabilityChart } from "./vulnerability/VulnerabilityChart";

type Vulnerability = Database['public']['Tables']['vulnerabilities']['Row'];

export const VulnerabilityList = () => {
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
  const [loading, setLoading] = useState(true);

  const fetchVulnerabilities = async () => {
    try {
      setLoading(true);
      const { data, error } = await supabase
        .from('vulnerabilities')
        .select('*')
        .order('detected', { ascending: false });

      if (error) {
        throw error;
      }

      setVulnerabilities(data || []);
    } catch (error) {
      console.error("Error fetching vulnerabilities:", error);
      toast({
        title: "Failed to load vulnerabilities",
        description: "There was an error loading the vulnerability data",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchVulnerabilities();

    const channel = supabase
      .channel('public:vulnerabilities')
      .on('postgres_changes', 
        { 
          event: '*', 
          schema: 'public', 
          table: 'vulnerabilities' 
        }, 
        (payload) => {
          console.log('Real-time update received:', payload);
          
          if (payload.eventType === 'INSERT') {
            setVulnerabilities(prev => [payload.new as Vulnerability, ...prev]);
            toast({
              title: "New vulnerability detected",
              description: `${payload.new.name} was just added to the system`,
            });
          } else if (payload.eventType === 'UPDATE') {
            setVulnerabilities(prev => 
              prev.map(item => item.id === payload.new.id ? (payload.new as Vulnerability) : item)
            );
          } else if (payload.eventType === 'DELETE') {
            setVulnerabilities(prev => 
              prev.filter(item => item.id !== payload.old.id)
            );
          }
        }
      )
      .subscribe((status) => {
        console.log('Subscription status:', status);
        if (status === 'SUBSCRIBED') {
          console.log('Successfully subscribed to real-time updates');
        }
      });

    return () => {
      supabase.removeChannel(channel);
    };
  }, []);

  const handleScanNow = () => {
    toast({
      title: "Scan Initiated",
      description: "Security scan has been started. Results will appear shortly.",
    });
    setTimeout(() => {
      fetchVulnerabilities();
    }, 2000);
  };

  return (
    <Card className="shadow-sm">
      <CardHeader className="pb-2">
        <div className="flex justify-between items-center">
          <div>
            <CardTitle className="text-xl font-bold">Security Vulnerabilities</CardTitle>
            <CardDescription>Manage detected security issues</CardDescription>
          </div>
          <div className="flex gap-2">
            <Link to="/add-vulnerability" className="inline-flex items-center">
              <Plus className="h-4 w-4 mr-1" />
              Add New
            </Link>
          </div>
        </div>
      </CardHeader>
      <CardContent>
        {loading ? (
          <div className="flex justify-center items-center py-8">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
          </div>
        ) : vulnerabilities.length === 0 ? (
          <EmptyState />
        ) : (
          <VulnerabilityChart vulnerabilities={vulnerabilities} />
        )}
      </CardContent>
    </Card>
  );
};
