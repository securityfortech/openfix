
import React from "react";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { AlertTriangle, CheckCircle, Clock, ShieldAlert, ShieldCheck } from "lucide-react";

export const VulnerabilityList = () => {
  const vulnerabilities = [
    {
      id: 1,
      name: "SQL Injection Vulnerability",
      location: "api/users/profile endpoint",
      description: "The endpoint is vulnerable to SQL injection attacks, potentially allowing unauthorized data access.",
      severity: "critical",
      detected: "2 days ago",
      status: "open"
    },
    {
      id: 2,
      name: "Outdated Dependencies",
      location: "3 packages with known vulnerabilities",
      description: "Multiple dependencies are outdated and contain known security vulnerabilities.",
      severity: "medium",
      detected: "5 days ago",
      status: "open"
    },
    {
      id: 3,
      name: "Insecure Cookie Configuration",
      location: "Authentication cookies missing secure flag",
      description: "Authentication cookies are missing the secure flag, potentially allowing interception over unencrypted connections.",
      severity: "low",
      detected: "1 week ago",
      status: "open"
    },
    {
      id: 4,
      name: "Cross-Site Scripting (XSS) Vulnerability",
      location: "comments/submit endpoint",
      description: "This endpoint was vulnerable to XSS attacks but has been fixed by implementing proper input validation.",
      severity: "medium",
      detected: "3 days ago",
      status: "fixed"
    },
    {
      id: 5,
      name: "Remote Code Execution",
      location: "file-upload service",
      description: "The file upload service could potentially allow malicious code execution through specially crafted files.",
      severity: "critical",
      detected: "1 day ago",
      status: "open"
    }
  ];

  const getSeverityBadge = (severity) => {
    switch (severity) {
      case "critical":
        return <Badge variant="destructive">Critical</Badge>;
      case "medium":
        return <Badge variant="default" className="bg-amber-500">Medium</Badge>;
      case "low":
        return <Badge variant="default" className="bg-blue-500">Low</Badge>;
      default:
        return null;
    }
  };

  const getStatusIcon = (status) => {
    switch (status) {
      case "open":
        return <ShieldAlert className="h-4 w-4 text-amber-500" />;
      case "fixed":
        return <ShieldCheck className="h-4 w-4 text-green-500" />;
      default:
        return null;
    }
  };

  return (
    <Card className="shadow-sm">
      <CardHeader className="pb-2">
        <div className="flex justify-between items-center">
          <div>
            <CardTitle className="text-xl font-bold">Security Vulnerabilities</CardTitle>
            <CardDescription>Manage detected security issues</CardDescription>
          </div>
          <Button size="sm">Scan Now</Button>
        </div>
      </CardHeader>
      <CardContent>
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Vulnerability</TableHead>
              <TableHead>Location</TableHead>
              <TableHead>Severity</TableHead>
              <TableHead>Status</TableHead>
              <TableHead>Detected</TableHead>
              <TableHead className="text-right">Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {vulnerabilities.map((vuln) => (
              <TableRow key={vuln.id}>
                <TableCell className="font-medium">
                  <div className="flex items-center gap-2">
                    {getStatusIcon(vuln.status)}
                    <span>{vuln.name}</span>
                  </div>
                </TableCell>
                <TableCell className="max-w-[200px] truncate">{vuln.location}</TableCell>
                <TableCell>{getSeverityBadge(vuln.severity)}</TableCell>
                <TableCell>
                  {vuln.status === "fixed" ? (
                    <span className="inline-flex items-center gap-1 text-green-600">
                      <CheckCircle className="h-3.5 w-3.5" />
                      Fixed
                    </span>
                  ) : (
                    <span className="inline-flex items-center gap-1 text-amber-600">
                      <AlertTriangle className="h-3.5 w-3.5" />
                      Open
                    </span>
                  )}
                </TableCell>
                <TableCell>
                  <div className="flex items-center gap-1 text-xs text-muted-foreground">
                    <Clock className="h-3 w-3" />
                    <span>{vuln.detected}</span>
                  </div>
                </TableCell>
                <TableCell className="text-right">
                  <div className="flex items-center justify-end gap-2">
                    {vuln.status === "fixed" ? (
                      <Button variant="outline" size="sm">View Details</Button>
                    ) : (
                      <>
                        <Button variant="outline" size="sm">Ignore</Button>
                        <Button size="sm">Fix Issue</Button>
                      </>
                    )}
                  </div>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </CardContent>
    </Card>
  );
};
