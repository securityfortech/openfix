
import { useState, useEffect, useCallback } from "react";
import { supabase } from "@/integrations/supabase/client";
import { useAuth } from "@/contexts/AuthContext";
import { toast } from "@/hooks/use-toast";

export function useVulnerabilityStats() {
  const { user } = useAuth();
  const [stats, setStats] = useState({
    total: 0,
    critical: 0,
    fixed: 0,
    totalChange: 0,
    criticalChange: 0,
    fixedChange: 0,
    securityScore: 0,
    scoreChange: 0,
  });
  const [loading, setLoading] = useState(true);

  const fetchStats = useCallback(async () => {
    if (!user) {
      setLoading(false);
      return;
    }

    try {
      setLoading(true);
      
      // Get total vulnerabilities count for the current user
      const { count: totalCount, error: totalError } = await supabase
        .from('vulnerabilities')
        .select('*', { count: 'exact', head: true })
        .eq('user_id', user.id);
      
      if (totalError) throw totalError;
      
      // Get critical vulnerabilities count
      const { count: criticalCount, error: criticalError } = await supabase
        .from('vulnerabilities')
        .select('*', { count: 'exact', head: true })
        .eq('user_id', user.id)
        .eq('severity', 'critical');
      
      if (criticalError) throw criticalError;
      
      // Get fixed vulnerabilities count
      const { count: fixedCount, error: fixedError } = await supabase
        .from('vulnerabilities')
        .select('*', { count: 'exact', head: true })
        .eq('user_id', user.id)
        .eq('status', 'fixed');
      
      if (fixedError) throw fixedError;
      
      // Calculate security score (simple formula: percentage of fixed out of total)
      const securityScore = totalCount > 0 
        ? Math.round(100 - ((criticalCount / totalCount) * 100)) 
        : 100;
      
      setStats({
        total: totalCount || 0,
        critical: criticalCount || 0,
        fixed: fixedCount || 0,
        totalChange: 0, // For now, we're not calculating changes
        criticalChange: 0,
        fixedChange: 0,
        securityScore,
        scoreChange: 0,
      });
      
    } catch (error) {
      console.error('Error fetching vulnerability stats:', error);
      toast({
        title: "Error loading statistics",
        description: "Failed to load vulnerability statistics",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  }, [user]);

  useEffect(() => {
    fetchStats();
    
    // Set up realtime subscription for vulnerability changes
    if (user) {
      const channel = supabase
        .channel('vulnerability-stats')
        .on('postgres_changes', 
          { 
            event: '*', 
            schema: 'public', 
            table: 'vulnerabilities',
            filter: `user_id=eq.${user.id}`
          }, 
          () => {
            // When any change occurs, refresh the stats
            fetchStats();
          }
        )
        .subscribe();
      
      return () => {
        supabase.removeChannel(channel);
      };
    }
  }, [fetchStats, user]);

  return { stats, loading };
}
