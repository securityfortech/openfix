
import { useState, useEffect } from "react";
import { supabase } from "@/integrations/supabase/client";
import { useAuth } from "@/contexts/AuthContext";

export const useVulnerabilityCount = () => {
  const [vulnerabilityCount, setVulnerabilityCount] = useState<number | null>(null);
  const { user } = useAuth();
  
  useEffect(() => {
    const fetchVulnerabilityCount = async () => {
      if (!user) return;
      
      try {
        const { count, error } = await supabase
          .from('vulnerabilities')
          .select('*', { count: 'exact', head: true })
          .eq('user_id', user.id);
        
        if (error) {
          console.error('Error fetching vulnerability count:', error);
          return;
        }
        
        setVulnerabilityCount(count);
      } catch (error) {
        console.error('Error fetching vulnerability count:', error);
      }
    };

    if (user) {
      fetchVulnerabilityCount();

      // Set up realtime subscription for vulnerability changes
      const channel = supabase
        .channel('sidebar-vulnerability-count')
        .on('postgres_changes', 
          { 
            event: '*', 
            schema: 'public', 
            table: 'vulnerabilities',
            filter: `user_id=eq.${user.id}`
          }, 
          () => {
            // When any change occurs, refresh the count
            fetchVulnerabilityCount();
          }
        )
        .subscribe();
      
      return () => {
        supabase.removeChannel(channel);
      };
    }
  }, [user]);

  return vulnerabilityCount;
};
