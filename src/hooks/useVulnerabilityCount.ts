
import { useState, useEffect } from "react";
import { supabase } from "@/integrations/supabase/client";

export const useVulnerabilityCount = () => {
  const [vulnerabilityCount, setVulnerabilityCount] = useState<number | null>(null);
  
  useEffect(() => {
    const fetchVulnerabilityCount = async () => {
      try {
        const { count, error } = await supabase
          .from('vulnerabilities')
          .select('*', { count: 'exact', head: true });
        
        if (error) {
          console.error('Error fetching vulnerability count:', error);
          return;
        }
        
        setVulnerabilityCount(count);
      } catch (error) {
        console.error('Error fetching vulnerability count:', error);
      }
    };

    fetchVulnerabilityCount();

    // Set up realtime subscription for vulnerability changes
    const channel = supabase
      .channel('sidebar-vulnerability-count')
      .on('postgres_changes', 
        { 
          event: '*', 
          schema: 'public', 
          table: 'vulnerabilities' 
        }, 
        () => {
          // When any change occurs, refresh the count
          fetchVulnerabilityCount();
        }
      )
      .subscribe();
    
    return () => {
      supabase.removeChannel(channel);
    };
  }, []);

  return vulnerabilityCount;
};
